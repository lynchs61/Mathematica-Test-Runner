#!/usr/bin/env wolframscript

(* Created by Mathematica Plugin for IntelliJ IDEA *)

(* :Title: mathematica-test-runner *)
(* :Author: Sean Lynch *)
(* :Date: 2018-01-19 *)

version = "0.0.1";

versionInfo[] :=
    StringTemplate["Version: ``"][version];

usage[] := StringTemplate["
  Usage: `name` [options] [targetFile|targetDirectory]

  Options:

    -V, --version              Output the version number
    -h, --help                 Output usage information
    -R, --reporter <reporter>  Specify a reporter to use. The default is 'spec'.
                               Choose from one of the following options:
                               `reporters`.

  Reporters:

    'spec'        - The default reporter - simply outputs a nested view of the
                    high-level results, showing successes and fails and a short
                    summary at the end.
    'mathematica' - Output the results exactly as they come from the Mathematica
                    front-end.
    'json'        - The results are given as a single JSON object that
                    corresponds to each TestReportObject.
    'tap'         - The TAP reporter emits lines for a Test-Anything-Protocol
                    consumer.
"
][<|"name" -> $ScriptCommandLine[[1]], "reporters" -> possibleReporters|>];


(* When adding a new reporter, be sure to add it to this list so it's handled
   correctly *)
possibleReporters = {"spec", "tap", "json", "mathematica"};

parseTarget[argv_, prevResult_] :=
    Module[{argList, result},
      result = prevResult;
      argList = argv;
      If[Length[argList] == 0,
        CompoundExpression[
          result["exit"] = "help",
          result["msg"] = "Must specify a target.",
          result
        ],
        CompoundExpression[
          result["target"] = First[argList],
          result
        ]
      ]
    ]

parseReporter[argv_, prevResult_] :=
    Module[{argList, result},
      result = prevResult;
      argList = argv;
      If[Length[argList] == 0,
        CompoundExpression[
          result["exit"] = "help",
          result["msg"] = "Must specify a reporter.",
          result
        ],
        If[FreeQ[possibleReporters, First[argv]],
          CompoundExpression[
            result["exit"] = "help",
            result["msg"] = StringTemplate["'``' is not a valid reporter. Please choose from ``"][First[argv], possibleReporters],
            result
          ],
          CompoundExpression[
            result["reporter"] = First[argv],
            parseTarget[Rest[argList], result]
          ]
        ]
      ]
    ]

parseInitialState[argv_] :=
    Module[{},
      If[StringMatchQ[First[argv], "-*"],
        If[MatchQ[First[argv], "-h" | "--help"],
          <|"exit" -> "help"|>,
          If[MatchQ[First[argv], "-V" | "--version"],
            <|"exit" -> "version"|>,
            If[MatchQ[First[argv], "-R" | "--reporter"],
              parseReporter[Rest[argv], <||>],
              <|"exit" -> "help",
                "msg" ->
                    StringTemplate["Invalid option '``'"][First[argv]]|>
            ]
          ]
        ],
        parseTarget[argv, <|"reporter" -> "spec"|>]
      ]
    ]

parseOpts[scriptCommandLine_] :=
    Module[{argList},
      argList = Rest[scriptCommandLine];
      If[Length[argList] == 0,
        <|"exit" -> "help",
          "msg" -> "Must specify a target file or directory"|>,
        parseInitialState[argList]
      ]
    ]

argsResult = parseOpts[$ScriptCommandLine];

getTestObject[testReportObject_, outcome_] :=
    Module[{topTitle, results, tests},
      topTitle = testReportObject["Title"];
      results = List @@ testReportObject["TestResults"];
      If[#["Outcome"] == outcome,
        <|"title" -> ToString[#["TestID"]],
          "fullTitle" -> topTitle <> " - " <> ToString[#["TestID"]],
          "duration" ->
              N[QuantityMagnitude[#["AbsoluteTimeUsed"], "Milliseconds"]],
          "err" -> If[#["Outcome"] == "Failure",
            <|"expected" ->
                StringTemplate["expected `` to equal ``"][
                  ToString[#["ExpectedOutput"]], ToString[#["ActualOutput"]]],
              "expectedMessages" ->
                  StringTemplate["expected `` to equal ``"][
                    ToString[#["ExpectedMessages"]],
                    ToString[#["ActualMessages"]]]|>, <||>]|>,
        {}
      ] & /@ results
    ];

outputJSON[testResults_] :=
    Module[{successTests, failureTests, outputResults},
      successTests =
          Flatten[getTestObject[#, "Success"] & /@ testResults];
      failureTests =
          Flatten[getTestObject[#, "Failure"] & /@ testResults];
      outputResults = <|
        "stats" -> <|"files" -> Length[testResults],
          "duration" ->
              QuantityMagnitude[Plus @@ (#["TimeElapsed"] & /@ testResults),
                "Milliseconds"],
          "tests" ->
              Plus @@ Flatten[{#["TestsSucceededCount"], #[
                  "TestsFailedCount"]} & /@ testResults],
          "passes" -> Plus @@ (#["TestsSucceededCount"] & /@ testResults),
          "failures" ->
              Plus @@ (#["TestsFailedCount"] & /@ testResults)|>|>;
      outputResults["tests"] = Flatten[{successTests, failureTests}];
      outputResults["passes"] = successTests;
      outputResults["failures"] = failureTests;
      Print[ExportString[outputResults, "RawJSON"]];
    ];

outputMathematica[testResults_] :=
    Print[ToString[InputForm[testResults]]];

If[KeyExistsQ[argsResult, "exit"],
  Switch[argsResult["exit"],
    "version", Print[versionInfo[]]; Exit[];,
    "help", If[KeyExistsQ[argsResult, "msg"], Print[argsResult["msg"]]]; Print[usage[]]; Exit[];
  ];
];

Module[{fileList, results},
  fileList = {};

  fileList = FileNames["*", argsResult["target"], IgnoreCase -> True];
  If[Length[fileList] == 0,
    If[FileExistsQ[argsResult["target"]],
      AppendTo[fileList, argsResult["target"]]
    ]
  ];

  If[Length[fileList] == 0,
    Print[StringTemplate["The target '``' is neither a directory with test files, nor an individual test file."][argsResult["target"]]]; Exit[]
  ];

  results = TestReport /@ fileList;

  Switch[argsResult["reporter"],
    "mathematica", outputMathematica[results],
    "json", outputJSON[results],
    "tap", outputTAP[results],
    "spec", outputSpec[results]
  ];
]



