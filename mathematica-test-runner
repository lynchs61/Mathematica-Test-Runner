#!/usr/bin/env wolframscript

(* :Title: mathematica-test-runner *)
(* :Author: Sean Lynch *)
(* :Date: 2018-01-19 *)

(*Print[$ScriptCommandLine];*)

version = "1.0.35";

versionInfo[] :=
    StringTemplate["Version: ``"][version];

usage[] := StringTemplate["
  Usage: `name` [options] [targetFile|targetDirectory]

  Options:

    -V, --version                Output the version number
    -h, --help                   Output usage information
    -R, --reporter <reporter>    Specify a reporter to use. The default is 'spec'.
                                 Choose from one of the following options:
                                 `reporters`.
    -o, --outputfile <filepath>  The path to the output file to save the results. If
                                 this is omitted the results will be sent to stdout.
    -i, --ignoremessages         Do not fail the test if the expected
                                 message is incorrect.

  Reporters:

    'spec'        - The default reporter - simply outputs a nested view of the
                    high-level results, showing successes and fails and a short
                    summary at the end.
    'mathematica' - Output the results exactly as they come from the Mathematica
                    front-end.
    'json'        - The results are given as a single JSON object that
                    corresponds to each TestReportObject.
    'tap'         - The TAP reporter emits lines for a Test-Anything-Protocol
                    consumer.
    'junit'       - Results are given in the JUnit format
"
][<|"name" -> $ScriptCommandLine[[1]], "reporters" -> possibleReporters|>];


(* When adding a new reporter, be sure to add it to this list so it's handled
   correctly *)
possibleReporters = {"spec", "tap", "json", "mathematica", "junit"};

parseTarget[argv_, prevResult_] :=
    Module[{argList, result},
      result = prevResult;
      argList = argv;
      If[Length[argList] == 0,
        CompoundExpression[
          result["exit"] = "help",
          result["msg"] = "Must specify a target.",
          result
        ],
        CompoundExpression[
          result["target"] = First[argList],
          result
        ]
      ]
    ]

parseReporter[argv_, prevResult_] :=
    Module[{argList, result},
      result = prevResult;
      argList = argv;
      If[Length[argList] == 0,
        CompoundExpression[
          result["exit"] = "help",
          result["msg"] = "Must specify a reporter.",
          result
        ],
        If[FreeQ[possibleReporters, First[argv]],
          CompoundExpression[
            result["exit"] = "help",
            result["msg"] = StringTemplate["'``' is not a valid reporter. Please choose from ``"][First[argv], possibleReporters],
            result
          ],
          CompoundExpression[
            result["reporter"] = First[argv],
            parseTarget[Rest[argList], result]
          ]
        ]
      ]
    ]

parseOpts[argv_] :=
    Module[{result},
      If[StringMatchQ[First[argv], "-*"],
        If[MatchQ[First[argv], "-h" | "--help"],
          <|"exit" -> "help"|>,
          If[MatchQ[First[argv], "-V" | "--version"],
            <|"exit" -> "version"|>,
            If[MatchQ[First[argv], "-R" | "--reporter"],
              parseReporter[Rest[argv], <||>],
              <|"exit" -> "help",
                "msg" ->
                    StringTemplate["Invalid option '``'"][First[argv]]|>
            ]
          ]
        ],
        parseTarget[argv, <|"reporter" -> "spec"|>]
      ]
    ]

parseOptsInitial[scriptCommandLine_] :=
    Module[{argList, outPos, outLocPos, ignoreMsgPos, ignoreMsg, outputPath, result},
      argList = Rest[scriptCommandLine];
      outputPath = "";

      Catch[
        If[Length[argList] == 0,
          Throw[<|"exit" -> "help", "msg" -> "Must specify a target file or directory"|>]
        ];

        outPos = Position[argList, "-o" | "--outputfile"];
        ignoreMsgPos = Position[argList, "-i" | "--ignoremessages"];

        If[Length[outPos] != 0,
          If[Length[argList] < outPos[[1, 1]] + 1,
            Throw[<|"exit" -> "help", "msg" -> "Must specify an output location when using the 'outputfile' switch"|>],

            outLocPos = MapAt[# + 1 &, outPos, {1, 1}];
            outputPath = First[Extract[argList, outLocPos]];
            argList = Delete[argList, First /@ {outPos, outLocPos}];
          ];
        ];

        If[Length[ignoreMsgPos] != 0,
          ignoreMsg = True;
          argList = Delete[argList, ignoreMsgPos],

          ignoreMsg = False;
        ];

        result = parseOpts[argList];
        result["ignoremessages"] = ignoreMsg;

        If[outputPath != "",
          result["output"] = outputPath
        ];

        Throw[result];
      ]
    ]

argsResult = parseOptsInitial[$ScriptCommandLine];

getTestObject[testReportObject_, outcomePattern_] :=
    Module[{topTitle, results, tests},
      topTitle = testReportObject["Title"];
      results = List @@ testReportObject["TestResults"];
      If[StringMatchQ[#["Outcome"], outcomePattern],
        <|"filetitle" -> topTitle,
          "title" -> ToString[#["TestID"]],
          "fullTitle" -> topTitle <> " - " <> ToString[#["TestID"]],
          "duration" -> N[QuantityMagnitude[#["AbsoluteTimeUsed"], "Milliseconds"]],
          "status" -> #["Outcome"],
          "err" ->
              If[StringMatchQ[#["Outcome"], If[argsResult["ignoremessages"], "Failure", "Failure" | "MessagesFailure"]],
                <|"expected" -> StringTemplate["expected `` to equal ``"][ToString[#["ExpectedOutput"]], ToString[#["ActualOutput"]]],
                  "expectedValue" -> ToString[#["ExpectedOutput"]],
                  "actualValue" -> ToString[#["ActualOutput"]],
                  "expectedMsg" -> StringTemplate["expected `` to be ``"][ToString[#["ExpectedMessages"]], ToString[#["ActualMessages"]]],
                  "expectedMessages" -> ToString[#["ExpectedMessages"]],
                  "actualMessages" -> ToString[#["ActualMessages"]]|>,
                <||>
              ]
        |>, {}] & /@ results
    ];

getTotalDurationInMS[testResults_] :=
    IntegerPart[QuantityMagnitude[Plus @@ (#["TimeElapsed"] & /@ testResults), "Milliseconds"]]

outputJSON[testResults_] :=
    Module[{outputResults},
      outputResults = <|
        "stats" -> <|
          "files" -> Length[testResults],
          "duration" -> getTotalDurationInMS[testResults],
          "tests" -> Plus @@ Flatten[{#["TestsSucceededCount"], #["TestsFailedCount"]} & /@ testResults],
          "passes" -> If[argsResult["ignoremessages"],
            Plus @@ (#["TestsSucceededCount"] + #["TestsFailedWithMessagesCount"] & /@ testResults),
            Plus @@ (#["TestsSucceededCount"] & /@ testResults)
          ],
          "failures" ->  If[argsResult["ignoremessages"],
            Plus @@ (#["TestsFailedCount"] - #["TestsFailedWithMessagesCount"] & /@ testResults),
            Plus @@ (#["TestsFailedCount"] & /@ testResults)
          ]|>|>;
      outputResults["tests"] = Flatten[getTestObject[#, "Success" | "Failure" | "MessagesFailure"] & /@ testResults];
      outputResults["passes"] = Flatten[getTestObject[#, If[argsResult["ignoremessages"], "Success" | "MessagesFailure", "Success"]] & /@ testResults];
      outputResults["failures"] = Flatten[getTestObject[#, If[argsResult["ignoremessages"], "Failure", "Failure" | "MessagesFailure"]] & /@ testResults];
      ExportString[outputResults, "RawJSON"]
    ];

outputMathematica[testResults_] :=
    ToString[InputForm[testResults]]

outputSpec[testResults_] :=
    Module[{result, successCount, failureCount, duration, esc, tests, failures},
      result = {};

      (*
       * Colors for printing to the console
       * See: https://mathematica.stackexchange.com/a/164487/90
       *)
      esc = Association["reset" -> "\033[1;0m", "red" -> "\033[0;31m",
        "green" -> "\033[1;32m", "gray" -> "\033[0;37m"];

      duration = getTotalDurationInMS[testResults];
      If[argsResult["ignoremessages"],
        successCount = Plus @@ (#["TestsSucceededCount"] + #["TestsFailedWithMessagesCount"] & /@ testResults);
        failureCount = Plus @@ (#["TestsFailedCount"] - #["TestsFailedWithMessagesCount"] & /@ testResults);
        ,
        successCount = Plus @@ (#["TestsSucceededCount"] & /@ testResults);
        failureCount = Plus @@ (#["TestsFailedCount"] & /@ testResults);
      ];

      CompoundExpression[
        AppendTo[result, {"\n  ", First[#]["filetitle"], "\n"}],
        Map[Function[test,
          Switch[
            test["status"],
            "Success", AppendTo[result, {"    ", esc["green"], "\[Checkmark] ", esc["gray"], test["title"], esc["reset"], "\n"}],
            "Failure", AppendTo[result, {"    ", esc["red"], "\[Times] ", test["title"], esc["reset"], "\n"}],
            "MessagesFailure",
            If[argsResult["ignoremessages"],
              AppendTo[result, {"    ", esc["green"], "\[Checkmark] ", esc["gray"], test["title"], esc["reset"], "\n"}],
              AppendTo[result, {"    ", esc["red"], "\[Times] ", test["title"], esc["reset"], "\n"}]
            ]
          ]], #]
      ] & /@ (getTestObject[#, "Failure" | "Success" | "MessagesFailure"] & /@ testResults);

      AppendTo[result, "\n"];
      AppendTo[result, {"  ", esc["green"], successCount, " passing", esc["reset"], esc["gray"], StringTemplate[" (``ms)"][duration], "\n"}];
      If[failureCount > 0,
        AppendTo[result, {"  ", esc["red"], failureCount, " failing", esc["reset"], "\n"}],
        AppendTo[result, {"\n"}]
      ];
      CompoundExpression[
        AppendTo[result, {"    ", #["filetitle"], "\n"}],
        AppendTo[result, {"      ", #["title"], "\n"}],
        Switch[#["status"],
          "Failure",
          CompoundExpression[
            AppendTo[result, {"      ", esc["red"], "Verification Error: ", #["err"]["expected"], esc["reset"], "\n"}],
            AppendTo[result, {"      ", esc["green"], "+ expected ", esc["red"], "- actual\n"}],
            AppendTo[result, {"      - ", #["err"]["actualValue"], esc["green"], "\n"}],
            AppendTo[result, {"      - ", #["err"]["expectedValue"], esc["reset"], "\n"}]
          ],
          "MessagesFailure",
          CompoundExpression[
            AppendTo[result, {"      ", esc["red"], "Unexpected Message(s): ", #["err"]["expectedMsg"], esc["reset"], "\n"}],
            AppendTo[result, {"      ", esc["green"], "+ expected ", esc["red"], "- actual\n"}],
            AppendTo[result, {"      - ", #["err"]["actualMessages"], esc["green"], "\n"}],
            AppendTo[result, {"      - ", #["err"]["expectedMessages"], esc["reset"], "\n"}]
          ]
        ]
      ] & /@ Flatten[getTestObject[#, If[argsResult["ignoremessages"], "Failure", "Failure" | "MessagesFailure"]] & /@ testResults];
      StringJoin[ToString /@ Flatten[result]]
    ];

outputTAP[testResults_] :=
    Module[{result, successCount, failureCount, tests, totalCount},
      result = {};
      successCount = If[argsResult["ignoremessages"],
        Plus @@ (#["TestsSucceededCount"] + #["TestsFailedWithMessagesCount"] & /@ testResults),
        Plus @@ (#["TestsSucceededCount"] & /@ testResults)
      ];
      failureCount = If[argsResult["ignoremessages"],
        Plus @@ (#["TestsFailedCount"] - #["TestsFailedWithMessagesCount"] & /@ testResults),
        Plus @@ (#["TestsFailedCount"] & /@ testResults)
      ];
      totalCount = successCount + failureCount;

      tests = Flatten[getTestObject[#, "Failure" | "Success" | "MessagesFailure"] & /@ testResults];

      AppendTo[result, {"1..", totalCount, "\n"}];

      MapIndexed[
        AppendTo[result, {
          If[StringMatchQ[#1["status"], If[argsResult["ignoremessages"], "Success" | "MessagesFailure", "Success"]],
            "ok ",
            "not ok "
          ],
          First[#2], " - ",
          #1["filetitle"], " ", #1["title"],
          If[#1["status"] == "Failure",
            "\n# Verification Error: " <> #["err"]["expected"],
            ""
          ],
          If[#1["status"] == "MessagesFailure" && !argsResult["ignoremessages"],
            "\n# Unexpected Messages(s): " <> #["err"]["expectedMsg"],
            ""
          ],
          "\n"
        }] &,
        tests
      ];

      AppendTo[result, {"# tests ", totalCount, "\n"}];
      AppendTo[result, {"# pass ", successCount, "\n"}];
      AppendTo[result, {"# fail ", failureCount, "\n"}];
      AppendTo[result, {"# skip ", 0}];

      StringJoin[ToString /@ Flatten[result]]
    ];

outputJUnit[testResults_] :=
    Module[{successCount, failureCount, tests, totalCount, duration,
      testSuites, xml, xmlString},
      successCount = If[argsResult["ignoremessages"],
        Plus @@ (#["TestsSucceededCount"] + #["TestsFailedWithMessagesCount"] & /@ testResults),
        Plus @@ (#["TestsSucceededCount"] & /@ testResults)
      ];
      failureCount = If[argsResult["ignoremessages"],
        Plus @@ (#["TestsFailedCount"] - #["TestsFailedWithMessagesCount"] & /@ testResults),
        Plus @@ (#["TestsFailedCount"] & /@ testResults)
      ];
      totalCount = successCount + failureCount;
      duration = QuantityMagnitude[Plus @@ (#["TimeElapsed"] & /@ testResults), "Seconds"];

      testSuites = Map[
        Function[{testReportAssoc},
          XMLElement[
            "testsuite",
            {
              "name" -> testReportAssoc["Title"],
              "tests" -> ToString[testReportAssoc["TestsSucceededCount"] + testReportAssoc["TestsFailedCount"]],
              "failures" -> If[
                argsResult["ignoremessages"],
                ToString[testReportAssoc["TestsFailedCount"] - testReportAssoc["TestsFailedWithMessagesCount"]],
                ToString[testReportAssoc["TestsFailedCount"]]],
              "time" -> ToString[QuantityMagnitude[testReportAssoc["TimeElapsed"], "Seconds"]]
            },
            Map[Function[{testResult},
              XMLElement["testcase",
                {
                  "name" -> ToString[testResult["TestID"]],
                  "time" -> ToString[QuantityMagnitude[testResult["AbsoluteTimeUsed"]]]
                },
                If[
                  StringMatchQ[testResult["Outcome"], If[argsResult["ignoremessages"], "Failure", "Failure" | "MessagesFailure"]],
                  {XMLElement["failure", {}, {
                    XMLObject["CDATASection"][
                      Switch[testResult["Outcome"],
                        "Failure",
                        StringTemplate[
                          "Verification Error: expected `` to equal ``"][ToString[testResult["ExpectedOutput"]], ToString[testResult["ActualOutput"]]],
                        "MessagesFailure",
                        StringTemplate[
                          "Unexpected Messages(s):  expected `` to be ``"][ToString[testResult["ExpectedMessages"]], ToString[testResult["ActualMessages"]]]
                      ]
                    ]}]},
                  {}
                ]]],
              Values[testReportAssoc["TestResults"]]
            ]
          ]
        ], testResults];

      xml =
          XMLObject["Document"][{XMLObject["Declaration"]["Version" -> "1.0", "Encoding" -> "UTF-8"]},
            XMLElement["testsuites",
              {
                "name" -> "Mathematica Tests",
                "time" -> ToString[QuantityMagnitude[Plus @@ (#["TimeElapsed"] & /@ testResults), "Seconds"]],
                "tests" -> ToString[totalCount],
                "failures" -> ToString[failureCount]
              },
              Prepend[testSuites, XMLElement["testsuite", {"name" -> "Root Suite", "tests" -> "0", "failures" -> "0", "time" -> "0"}, {}]]],
            {}
          ];

      ExportString[xml, "XML"]
    ]

If[KeyExistsQ[argsResult, "exit"],
  Switch[argsResult["exit"],
    "version", Print[versionInfo[]]; Exit[];,
    "help", If[KeyExistsQ[argsResult, "msg"], Print[argsResult["msg"]]]; Print[usage[]]; Exit[];
  ];
];

Module[{fileList, testResults, reporterResults},
  fileList = {};

  fileList = FileNames["*", argsResult["target"], IgnoreCase -> True];
  If[Length[fileList] == 0,
    If[FileExistsQ[argsResult["target"]],
      AppendTo[fileList, argsResult["target"]]
    ]
  ];

  If[Length[fileList] == 0,
    Print[StringTemplate["The target '``' is neither a directory with test files, nor an individual test file."][argsResult["target"]]]; Exit[]
  ];

  testResults = TestReport /@ fileList;

  reporterResults =
      Switch[argsResult["reporter"],
        "mathematica", outputMathematica[testResults],
        "json", outputJSON[testResults],
        "tap", outputTAP[testResults],
        "spec", outputSpec[testResults],
        "junit", outputJUnit[testResults]
      ];

  If[KeyExistsQ[argsResult, "output"],
    Module[{outputFilePath, directory, stream},
      outputFilePath = ExpandFileName[argsResult["output"]];
      directory = DirectoryName[outputFilePath];
      If[!DirectoryQ[directory],
        CreateDirectory[directory];
      ];
      stream = OpenWrite[outputFilePath];
      WriteString[stream, reporterResults, "\n"];
      Close[stream];
    ],
    Print[reporterResults]
  ]
]



